# This is a basic workflow to help you get started with Actions

name: CI/CD

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  ECR_REPOSITORY: myapp
  ECS_SERVICE: myapp
  ECS_CONTAINER_NAME: myapp-bakend
  ECS_CLUSTER_NAME: mycluster
  ECS_TASK_DEFINITION: myapp.json
  AWS_REGION: eu-central-1
  environment: dev


jobs:
  deploy:
    name: Build and Deploy to ECS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      run: echo "Checkout SCM"
      # uses: actions/checkout@v2

    - name: Configure AWS credentials
      run: echo "confgiured"
      # uses: aws-actions/configure-aws-credentials@v1
      # with:
      #   aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #   aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      run: echo "Logged in"
      # id: login-ecr
      # uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      # id: build-image
      # env:
      #   ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #   IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Build docker images"
        echo "Push docker image to ECR"
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        # echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      run: echo "Inject task definition"
      # id: task-def
      # uses: aws-actions/amazon-ecs-render-task-definition@v1
      # with:
      #   task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #   container-name: ${{ env.ECS_CONTAINER_NAME }}
      #   image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      run: |
        echo 'Deploy to FARGATE cluster ${{ env.environment }}'
      # uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      # with:
      #   task-definition: ${{ steps.task-def.outputs.task-definition }}
      #   service: ${{ env.ECS_SERVICE }}
      #   cluster: ${{ env.ECS_CLUSTER_NAME }}
      #   wait-for-service-stability: true

#     - name: Microsoft Teams Notification
#       uses: skitionek/notify-microsoft-teams@master
#       if: always()
#       with:
#         webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
#         needs: ${{ toJson(needs) }}
#         job: ${{ toJson(job) }}
#         steps: ${{ toJson(steps) }}

